
import logging
import requests
import openai
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# üîê –í–°–¢–ê–í–¨ –°–Æ–î–ê –°–í–û–ò –ö–õ–Æ–ß–ò
TELEGRAM_BOT_TOKEN = "8247478033:AAGktHw1rhHf9nUCk7lCj9nQFtV0eh5jkTo"
OPENROUTER_API_KEY = "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"
TMDB_API_KEY = "8f90cd15841e59f7856b8fd29af0829e"

openai.api_key = OPENROUTER_API_KEY
openai.api_base = "https://openrouter.ai/api/v1"

# üëâ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üé¨ –í–æ–ø—Ä–æ—Å—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
questions = [
    "–ö–∞–∫–æ–µ —É —Ç–µ–±—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≥—Ä—É—Å—Ç–Ω–æ, —Å–ø–æ–∫–æ–π–Ω–æ, –≤–µ—Å–µ–ª–æ)",
    "–•–æ—á–µ—à—å —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª?",
    "–°–º–æ—Ç—Ä–∏—à—å –æ–¥–∏–Ω/–æ–¥–Ω–∞ –∏–ª–∏ —Å –∫–µ–º-—Ç–æ?",
    "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏–ª–∏ —Å—Ç–∞—Ä–æ–µ?",
    "–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —É —Ç–µ–±—è –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5 —á–∞—Å–∞, —Ü–µ–ª—ã–π –≤–µ—á–µ—Ä)?"
]

user_answers = {}

# ü§ñ –ó–∞–ø—Ä–æ—Å –∫ OpenRouter (GPT-–ø–æ–¥–æ–±–Ω–∞—è –º–æ–¥–µ–ª—å)
def ask_openrouter(prompt: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "gpt-3.5-turbo",  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
        "messages": [
            {"role": "system", "content": "–¢—ã ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–π –∫–∏–Ω–æ—ç–∫—Å–ø–µ—Ä—Ç. –ü–æ–¥–±–∏—Ä–∞–π —Ñ–∏–ª—å–º—ã –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é —á–µ–ª–æ–≤–µ–∫–∞."},
            {"role": "user", "content": prompt}
        ]
    }

    try:
        response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)
        print("Status code:", response.status_code)
        print("Response:", response.text)

        result = response.json()
        return result["choices"][0]["message"]["content"]
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter:", e)
        return "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

# üìΩÔ∏è –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ —á–µ—Ä–µ–∑ TMDb
def search_movie(query):
    url = f"https://api.themoviedb.org/3/search/movie?api_key={TMDB_API_KEY}&query={query}"
    res = requests.get(url).json()
    if res['results']:
        movie = res['results'][0]
        return f"üé¨ *{movie['title']}* ({movie.get('release_date', '–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')[:4]})\n" \
               f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {movie.get('vote_average', '?')}/10\n" \
               f"üìÑ {movie.get('overview', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n" \
               f"https://www.themoviedb.org/movie/{movie['id']}"
    return "–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢"

# üì≤ –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_answers[update.effective_chat.id] = []
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üé• –Ø ‚Äî AI Movie Buddy.\n–î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º —Ç–µ–±–µ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª.\n\n" + questions[0])
    return 0

# üîÑ –í–æ–ø—Ä–æ—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
async def handle_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    step = len(user_answers[chat_id])
    user_answers[chat_id].append(update.message.text)

    if step + 1 < len(questions):
        await update.message.reply_text(questions[step + 1])
        return step + 1
    else:
        await update.message.reply_text("–î—É–º–∞—é –Ω–∞–¥ –ø–æ–¥–±–æ—Ä–∫–æ–π... üçø")

        prompt = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª:\n"
        for q, a in zip(questions, user_answers[chat_id]):
            prompt += f"{q} ‚Äî {a}\n"
        prompt += "–ü–æ–¥—Å–∫–∞–∂–∏ 2-3 –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–æ–π–¥—É—Ç."

        try:
            gpt_reply = ask_openrouter(prompt)
            await update.message.reply_text("ü§ñ –í–æ—Ç —á—Ç–æ —è –ø–æ–¥–æ–±—Ä–∞–ª:\n\n" + gpt_reply)

            # –ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞ –≤ TMDb
            first_movie = gpt_reply.split("\n")[0].split("-")[0].strip("‚Ä¢1234567890. ").strip()
            if first_movie:
                info = search_movie(first_movie)
                await update.message.reply_markdown(info)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            await update.message.reply_text("–û–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

        return ConversationHandler.END

# üîö –ö–æ–º–∞–Ω–¥–∞ /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

# ‚ñ∂Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={i: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answers)] for i in range(len(questions))},
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    app.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    app.run_polling()

if __name__ == "__main__":
    main()
